
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, sessionToken])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    quizzes       Quiz[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Quiz {
    id          String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title       String
    description String?
    questions   Question[]
    image       String? @db.MediumText
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@index([userId, title, description])
}
enum QuestionType {
    answers
    true_false
    input
    slider
}

model Question {
    id          String   @id @default(cuid())
    text        String
    answers     Answer[]
    ytLink     String?
    image      String? @db.MediumText
    answerTime Int
    type      QuestionType
    quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId      String

    @@index([quizId])
}

model Answer {
    id          String   @id @default(cuid())
    text       String
    isCorrect   Boolean
    image     String?
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId  String

    @@index([questionId])
}
